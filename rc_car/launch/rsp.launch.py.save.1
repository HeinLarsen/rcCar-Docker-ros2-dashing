import os

from ament_index_python.packages import get_package_share_directory

from launch import LaunchDescription
from launch.substitutions import LaunchConfiguration
from launch.actions import DeclareLaunchArgument
from launch_ros.actions import Node
# from launch.substitutions import Command

import xacro


def generate_launch_description():

    # Check if we're told to use sim time
    use_sim_time = LaunchConfiguration('use_sim_time')
   
  # Copyright 2018 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os

from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch_ros.actions import Node


def generate_launch_description():
    # TODO(wjwwood): Use a substitution to find share directory once this is implemented in launch
    urdf = os.path.join(get_package_share_directory('dummy_robot_bringup'),
                        'launch', 'single_rrbot.urdf')
    return LaunchDescription([
        Node(package='dummy_map_server', node_executable='dummy_map_server', output='screen'),
        Node(package='robot_state_publisher', node_executable='robot_state_publisher',
             output='screen', arguments=[urdf]),
        Node(package='dummy_sensors', node_executable='dummy_joint_states', output='screen'),
        Node(package='dummy_sensors', node_executable='dummy_laser', output='screen')
    ])
    # Process the URDF file
    pkg_name='rc_car'
    file_subpath = 'description/robot.urdf.xml'

    pkg_path = os.path.join(get_package_share_directory('rc_car'))
    xacro_file = os.path.join(pkg_path,'description','robot.urdf.xacro')
#    robot_description_config = xacro.process_file(xacro_file).toxml()
#    file = os.path.join(get_package_share_directory(pkg_name),file_subpath)
    robot_description_raw = xacro.process_file(xacro_file).toxml()

   # print(f"Package path: {pkg_path}")
   # print(f"Xacro file: {xacro_file}")
   # print(f"desc: {robot_description_config}")

    # Create a robot_state_publisher node
#    params = {'robot_description': robot_description_config, 'use_sim_time': use_sim_time}
    node_robot_state_publisher = Node(
        package='robot_state_publisher',
        node_executable='robot_state_publisher',
        output='screen',
	parameters=[{'robot_description': robot_description_raw}]
#	arguments=[('__log_level:=fatal')]
    )


    # Launch!
    return LaunchDescription([
        DeclareLaunchArgument(
            'use_sim_time',
            default_value='false',
            description='Use sim time if true'),

        node_robot_state_publisher
    ])
